@use 'sass:math';

// Responsive breakpoints
@mixin above-large {
    @media (min-width: #{ $large-breakpoint-width }) {
        @content;
    }
}

@mixin above-medium {
    @media (min-width: #{ $medium-breakpoint-width }) {
        @content;
    }
}

@mixin above-small {
    @media (min-width: #{ $small-breakpoint-width }) {
        @content;
    }
}

@mixin below-medium {
    @media (max-width: #{ $medium-breakpoint-width - 0.02 }) {
        @content;
    }
}

// Color Scheme
@mixin light-mode {
    html[data-scheme="dawn"] & {
        @content;
    }
}

@mixin dark-mode {
    html[data-scheme="dusk"] & {
        @content;
    }
}

/** Automate the output based on the presence of a template string. */
@function template-value($value, $template: false, $tag: '{{value}}') {
    @if $template != false {
        @return #{ unquote(str-replace($template, $tag, $value)) };
    } @else {
        @return #{ $value };
    }
}

/** Return a property-value pair with fluid scaling based on viewport size. */
@mixin fluid($min, $max, $prop: 'font-size', $template: false, $tag: '{{value}}', $clamp: false) {
    $breakpoint-min: $small-breakpoint-width-rem * 1rem;
    $breakpoint-max: $large-breakpoint-width-rem * 1rem;
    $prop: unquote($prop);

    @if ($clamp == true) {
        $calc-val: fluid-unit($breakpoint-min, $breakpoint-max, $min, $max);
        $val: clamp(#{ if($min>$max, $max, $min) }, #{ $calc-val }, #{ if($min>$max, $min, $max) });
        #{$prop}: #{ $min }; // Fallback for browsers that don't support clamp
        #{$prop}: template-value($val, $template, $tag);
    }
    @else {
        #{$prop}: template-value($min, $template, $tag);

        @media screen and (min-width: #{$breakpoint-min}) {
            $val: fluid-unit($breakpoint-min, $breakpoint-max, $min, $max);
            #{$prop}: template-value($val, $template, $tag);
        }

        @media screen and (min-width: #{$breakpoint-max}) {
            #{$prop}: template-value($max, $template, $tag);
        }
    }
}

/** Wrapper for the fluid mixin specifically for font-size. */
@mixin fluid-type($min-value: 1rem, $max-value: 1.125rem, $min-vw: $small-breakpoint-width-rem * 1rem, $max-vw: $large-breakpoint-width-rem * 1rem) {
    $factor: math.div(1, ($max-vw - $min-vw)) * ($max-value - $min-value);
    $calc-value: unquote("#{ $min-value - ($min-vw * $factor) } + #{ 100vw * $factor }");

    font-size: $min-value; // Fallback for older browsers
    font-size: clamp(#{ if($min-value > $max-value, $max-value, $min-value) }, #{ $calc-value }, #{ if($min-value > $max-value, $min-value, $max-value) });
}

/** Return the necessary styles to customise scrollbars. */
@mixin custom-scrollbar($dir: vertical, $size: 1rem) {
    &::-webkit-scrollbar {
        width: if($dir == horizontal, 1rem, $size);
        height: if($dir == vertical, 1rem, $size);
    }
    
    &::-webkit-scrollbar-thumb {
        @if ($dir == horizontal) { // The horizontal scrollbar has a simpler look
            background: var(--c-primary-med);
            box-shadow: inset 0 1px 0 var(--c-grey-min);
        }
        @else { // The main vertical one has more detail
            background: var(--c-primary-med) linear-gradient(
                to bottom,
                var(--c-primary-min) 0.125rem,

                transparent 0,
                transparent calc(50% - 0.0625rem),

                var(--c-primary-min) 0,
                var(--c-primary-min) calc(50% + 0.0625rem),

                transparent 0,
                transparent calc(100% - 0.125rem),

                var(--c-primary-min) 0,
                var(--c-primary-min) calc(50% + 0.125rem)
            ) center / calc(100% - 0.5rem) 0.5rem no-repeat; // Creates three horizontal lines in the middle of the scrollbar thumb
            box-shadow:
                inset 1px 0 0 var(--c-primary-min), // Left-side line on inside
                inset -1px 0 0 var(--c-primary-min), // Ride-side line on inside
                0 0 0 1px var(--c-primary-min); // Top- and bottom-side lines on outside
        }
    }
    
    &::-webkit-scrollbar-track {
        background: linear-gradient(if($dir == horizontal, 180deg, 90deg), var(--c-grey-med) 1px, var(--c-grey-max) 0);
    }
}